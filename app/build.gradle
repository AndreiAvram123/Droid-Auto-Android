
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id("dagger.hilt.android.plugin")
    id 'com.google.gms.google-services'
    id "com.starter.easylauncher" version "$easylauncher_version"
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'

}
apply plugin: 'kotlin-kapt'
apply plugin: 'com.android.application'

def getKeystoreProperties(String fileName) {
    def properties = new Properties()
    properties.setProperty("keyAlias", "")
    properties.setProperty("keyPassword", "")
    properties.setProperty("storeFile", "")
    properties.setProperty("storePassword", "")
    try {
        def propsFile = rootProject.file(fileName)
        // Attempt to get keystore properties from local file first (to build locally) before
        // attempting to fetch from environment variables second (to build on the build server)
        if (propsFile.exists()) {
            properties.load(new FileInputStream(propsFile))
        } else {
            getPropertiesFromEnvironmentVariables(properties)
        }
    } catch (Exception e) {
        properties = null
        println "Unable to read KeyStore"
        e.printStackTrace()
    }
    return properties
}


static def getPropertiesFromEnvironmentVariables(Properties properties) {
    properties.setProperty("keyAlias", System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS"))
    properties.setProperty("keyPassword", System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD"))
    properties.setProperty("storeFile", System.getenv("BITRISE_KEY_DOWNLOAD_PATH"))
    properties.setProperty("storePassword", System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD"))
}
def RELEASE_KEYSTORE = getKeystoreProperties('keystore_local.properties')


android {
    compileSdk 31

    defaultConfig {
        applicationId "com.andrei.car_rental_android"
        minSdk 27
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion '1.5.21'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    signingConfigs {
        debug {
            if (RELEASE_KEYSTORE != null) {
                storeFile file(RELEASE_KEYSTORE.getProperty("storeFile"))
                storePassword RELEASE_KEYSTORE.getProperty("storePassword")
                keyAlias RELEASE_KEYSTORE.getProperty("keyAlias")
                keyPassword RELEASE_KEYSTORE.getProperty("keyPassword")
            }
        }

        release {
            if (RELEASE_KEYSTORE != null) {
                storeFile file(RELEASE_KEYSTORE.getProperty("storeFile"))
                storePassword RELEASE_KEYSTORE.getProperty("storePassword")
                keyAlias RELEASE_KEYSTORE.getProperty("keyAlias")
                keyPassword RELEASE_KEYSTORE.getProperty("keyPassword")
            }
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }

        release {
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "environment"
    productFlavors {
        dev {
            dimension "environment"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [MAPS_API_KEY : ""+ System.getenv("MAPS_KEY_DEV")]
        }
        qa {
            dimension "environment"
            applicationIdSuffix ".qa"
            manifestPlaceholders = [MAPS_API_KEY : ""+ System.getenv("MAPS_KEY_STAGING")]
        }
        prod {
            dimension "environment"
            manifestPlaceholders = [MAPS_API_KEY : ""+ System.getenv("MAPS_KEY_QA")]
        }
    }

    easylauncher {
        defaultFlavorNaming true

        def versionLabel = "${android.defaultConfig.versionName}-${android.defaultConfig.versionCode}"

        productFlavors {
            dev {
                filters = [
                        chromeLike(label: versionLabel),
                        blueRibbonFilter()
                ]
            }
            staging {
                filters = [
                        chromeLike(label: versionLabel),
                        grayRibbonFilter()
                ]
            }
            prod {
                enable false
            }
        }
    }
}

dependencies {
    def lifecycle_version = '2.4.0-rc01'


    //coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'


    //maps
    //dependencies described here
    //https://github.com/googlemaps/android-maps-ktx
    implementation 'com.google.android.gms:play-services-maps:17.0.1'
    implementation 'com.google.maps.android:android-maps-utils:2.3.0'
    implementation 'com.google.maps.android:maps-ktx:3.2.0'


    //navigation
    implementation("androidx.navigation:navigation-compose:2.4.0-alpha10")

    //dependency injection
    implementation("com.google.dagger:hilt-android:$hilt_version")
    kapt("com.google.dagger:hilt-android-compiler:$hilt_version")
    implementation("androidx.hilt:hilt-navigation-compose:1.0.0-alpha03")

    //lifecycle
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version")


    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.4.0-rc01'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
}

